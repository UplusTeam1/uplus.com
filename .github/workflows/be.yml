# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

env:
  RESOURCE_PATH: ./backend/project/src/main/resources/application.yaml
  working-directory: ./backend/project

on:
  push:
    branches: [ "develop"]
    paths: 
       - 'backend/project/**'
       - '.github/workflows/be.yml'
  pull_request:
    branches: [ "develop"]
    paths: 
       - 'backend/project/**'
       - '.github/workflows/be.yml'

permissions:
  contents: read

jobs:
  build:
  
#     defaults:
#       run:
#         working-directory: "backend/project/**"
        
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        
    - name: Set yaml file
      uses: microsoft/variable-substitution@v1
      with:
        files: ${{ env.RESOURCE_PATH }}
      env:
        spring.datasource.username: ${{ secrets.RDS_ID }}
        spring.datasource.password: ${{ secrets.RDS_SECRETS }}
        
    - name: Grant execute permission for gradlew
      working-directory: ${{env.working-directory}}
      run: chmod +x ./gradlew
    
    - name: Build with Gradle
      working-directory: ${{env.working-directory}}
      run: ./gradlew build
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: lguplus
        IMAGE_TAG: be
      run: |
        docker buildx build --platform=linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      working-directory: ${{env.working-directory}}
      
      
#     - name: Fill in the new image ID in the Amazon ECS task definition
#       id: task-def      
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: task-definition.json
#         container-name: nginx
#         image: ${{ steps.build-image.outputs.image }}
        
        
#     - name: Deploy Amazon ECS task definition
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ${{ steps.task-def.outputs.task-definition }}
#         service: nginx-service
#         cluster: lguplus-cluster
#         wait-for-service-stability: true
#         codedeploy-appspec: appspec.yaml
      
    ## gradle caching
#     - name: Gradle Caching
#       uses: actions/cache@v3
#       with:
#         path: |
#           ~/.gradle/caches
#           ~/.gradle/wrapper
#         key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#         restore-keys: |
#           ${{ runner.os }}-gradle-


#     # 전송할 파일을 담을 디렉토리 생성
#     - name: Make Directory for deliver
#       run: mkdir -p deploy
#       shell: bash
#       working-directory: ${{env.working-directory}}
      
#     # Jar 파일 Copy
#     - name: Copy Jar
#       run: cp ./build/libs/*.jar ./deploy/
#       working-directory: ${{env.working-directory}}

#     # 압축파일 형태로 전달
#     - name: Make zip file
#       run: zip -r -qq -j ./springboot-intro-build.zip ./deploy
#       working-directory: ${{env.working-directory}}

#     # S3 Bucket으로 copy
#     - name: Deliver to AWS S3
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       run: |
#         aws s3 cp \
#         --region ap-northeast-2 \
#         ./springboot-intro-build.zip s3://uplus-be/springboot-intro-build.zip
#       working-directory: ${{env.working-directory}}
