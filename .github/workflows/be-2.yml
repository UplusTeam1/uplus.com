name: SpringBoot Deploy to AWS EC2

env:
  RESOURCE_PATH: ./backend/project/src/main/resources/application.yaml
  working-directory: ./backend/project
  ECR_REPOSITORY: lguplus
  IMAGE_TAG: latest
  ECS_SERVICE: uplus-fe-service
  ECS_CLUSTER: uplus-fe-cluster
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: uplus-fe-container
  yaml: ${{secrets.YAML}}
  
on:
  push:
    branches: [ "develop"]
    paths: 
       - 'backend/project/Dockerfile'
       - '.github/workflows/be-2.yml'
#   pull_request:
#     branches: [ "develop"]
#     paths: 
#        - 'backend/project/**'
#        - '.github/workflows/be.yml'

permissions:
  contents: read

jobs:
  build:        
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set yaml file
      run: |
        touch ${{ env.RESOURCE_PATH }}
        echo "${{env.yaml}}" > ${{ env.RESOURCE_PATH }}

    # ECR 푸시하기
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      working-directory: ${{env.working-directory}}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: be
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" 
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
#     - name: Set up JDK 1.8
#       uses: actions/setup-java@v1
#       with:
#         java-version: 1.8
      
        
#     - name: Grant execute permission for gradlew
#       working-directory: ${{env.working-directory}}
#       run: chmod +x ./gradlew
    
#     - name: Build with Gradle
#       working-directory: ${{env.working-directory}}
#       run: ./gradlew build -x test
      
#     - name: Make Directory
#       run: mkdir -p deploy
#       working-directory: ${{env.working-directory}}
    
#     - name: Copy Jar
#       run: cp ./build/libs/*.jar ./deploy
#       working-directory: ${{env.working-directory}}
      
#     - name: Copy appspec
#       run: cp appspec.yml ./deploy
#       working-directory: ${{env.working-directory}}
    
#     - name: Copy script
#       run: cp ./scripts/*.sh ./deploy
#       working-directory: ${{env.working-directory}}
    
#     - name: Make zip file
#       run: zip -r -qq -j ./my-lguplus-back.zip ./deploy
#       working-directory: ${{env.working-directory}}      
      
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ap-northeast-2

#     - name: Upload to AWS S3
#       run: aws s3 cp --region ap-northeast-2 ./my-lguplus-back.zip s3://uplus-be/
#       working-directory: ${{env.working-directory}}
    
#     - name: Deploy to AWS CodeDeploy
#       run: aws deploy create-deployment 
#         --application-name my-lguplus-web-deploy
#         --deployment-group-name my-lguplus-web-back-deploy
#         --file-exists-behavior OVERWRITE 
#         --s3-location bucket=uplus-be,bundleType=zip,key=my-lguplus-back.zip
#         --region ap-northeast-2
