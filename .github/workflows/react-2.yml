name: FE Dockerize and Deploy

env:
  working-directory: ./frontend/project
  ECR_REPOSITORY: lg-uplus-pub
  IMAGE_TAG: latest

on:
   push:
     branches: [ "develop" ]
     paths: 
        - '.github/workflows/react-2.yml'
        - 'frontend/project/**'
        
jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      CI: false
    strategy:
      matrix:
        node-version: [14.x]
        
    steps:
    - uses: actions/checkout@v3      

    # 도커 허브에 푸시하기
#     - name: Docker meta
#       id: docker_meta
#       uses: crazy-max/ghaction-docker-meta@v1
#       with:
#         images: uplusizero/front
#         tag-semver: |
#           {{version}}
#           {{major}}.{{minor}}

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v1

#     - name: Login to DockerHub
#       uses: docker/login-action@v1
#       with:
#         username: ${{ secrets.DOCKERHUB_USERNAME }}
#         password: ${{ secrets.DOCKERHUB_TOKEN }}
        
        
#     - name: Build and push
#       uses: docker/build-push-action@v2
#       with:
#         context: .
#         file: ${{env.working-directory}}/Dockerfile
#         platforms: linux/amd64
#         push: true
#         tags: ${{ steps.docker_meta.outputs.tags }}
#         labels: ${{ steps.docker_meta.outputs.labels}}
        
        
    # ECR 푸시하기
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ap-northeast-2
        
    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: public       
      
#     - name: Build, tag, and push image to Amazon ECR
#       id: build-image
#       working-directory: ${{env.working-directory}}
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         IMAGE_TAG: fe
#       run: |
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      working-directory: ${{env.working-directory}}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: fe
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag lg-uplus-pub:latest public.ecr.aws/h4m4k0f6/lg-uplus-pub:latest
        docker push public.ecr.aws/h4m4k0f6/lg-uplus-pub:latest


#         id: build-and-push
#         uses: pahud/ecr-public-action@8cd826db40befb59b0cd0b60b22a7ba72d06a7f7
#         with:
#           dockerfile: .devcontainer/Dockerfile
#           context: .devcontainer
#           create_repo: ecr_repo_name
#           tags: |
#             docker tag lg-uplus-pub:latest public.ecr.aws/h4m4k0f6/lg-uplus-pub:latest
#             public.ecr.aws/d7p2r8s3/${{ steps.repoName.outputs.reponame }}:${{ steps.sha.outputs.sha7 }}
