name: Order To ECS

env:
  RESOURCE_PATH: ./MSA/backend/project/order/src/main/resources/application.yaml
  working-directory: ./MSA/backend/project/order
  ECR_REPOSITORY: lguplus
  ECS_SERVICE: order
  ECS_CLUSTER: uplus-cluster
  ECS_TASK_DEFINITION: ./MSA/backend/project/order/task-definition.json
  CONTAINER_NAME: be-order
  yaml: ${{secrets.YAML_ORDER}}
  
on:
  push:
    branches: [ "develop"]
    paths: 
       - 'MSA/backend/project/order/**'
       - '.github/workflows/be-order.yml'
  pull_request:
    branches: [ "develop"]
    paths: 
       - 'MSA/backend/project/order/**'
       - '.github/workflows/be-order.yml'

permissions:
  contents: read

jobs:
  build:        
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set yaml file
      run: |
        touch ${{ env.RESOURCE_PATH }}
        echo "${{env.yaml}}" > ${{ env.RESOURCE_PATH }}
        
    # ECR 푸시하기
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      working-directory: ${{env.working-directory}}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: be-order
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" 
        
#     - name: Fill in the new image ID in the Amazon ECS task definition
#       id: task-def
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: ${{ env.ECS_TASK_DEFINITION }}
#         container-name: ${{ env.CONTAINER_NAME }}
#         image: ${{ steps.build-image.outputs.image }}
  
#     - name: Deploy Amazon ECS task definition
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ${{ steps.task-def.outputs.task-definition }}
#         service: ${{ env.ECS_SERVICE }}
#         cluster: ${{ env.ECS_CLUSTER }}
#         wait-for-service-stability: true
